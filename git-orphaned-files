#!/usr/bin/env python

import os
import shutil
import subprocess
import sys
import tempfile
import time

def orphans_of_commit(commit):
  return set([s.strip() for s in subprocess.Popen(["git-orphans-cache", commit], stdout=subprocess.PIPE).stdout])

def parents_of_commit(commit):
  return list(subprocess.Popen(["git", "rev-list", "--parents", "--max-count=1", commit], stdout=subprocess.PIPE).stdout)[0].strip().split(" ")[1:]

def git_files_of_commit(commit):
    out = set()
    for f in set(subprocess.Popen(["git", "ls-files", "--with-tree=" + commit], stdout=subprocess.PIPE).stdout):
        out.add(f.strip())
    return out

def orphans(command_str, cwd="."):
    start_time_unix = int(subprocess.check_output(['date', '+%s']).strip())

    time.sleep(1)  # atime has a one-second resolution

    subprocess.call(command_str, cwd=cwd)

    out = set()

    for line in subprocess.Popen(["find", "."], stdout = subprocess.PIPE, cwd=cwd).stdout:
        filepath = line.strip()
        atime_unix = int(subprocess.check_output(["stat", "-f", "%a", filepath], cwd=cwd).strip())
        if atime_unix <= start_time_unix:
            out.add(filepath[2:])

    return out

def git_orphans(command_str, commit):
    devnull = open(os.devnull, 'wb')

    temp_directory_path = tempfile.mkdtemp(suffix='git-orphans:'+command_str);
    subprocess.check_call(["git", "clone", "--recurse-submodules", ".", temp_directory_path], stdout=devnull, stderr=devnull)
    # subprocess.check_call(["git", "fetch", "origin", commit], cwd=temp_directory_path, stdout=devnull, stderr=devnull)
    subprocess.check_call(["git", "checkout", commit], cwd=temp_directory_path, stdout=devnull, stderr=devnull)

    orphs = orphans(command_str, cwd=temp_directory_path)
    git_files = git_files_of_commit(commit)

    shutil.rmtree(temp_directory_path)

    out = set()

    for f in (orphs & git_files):
      out.add(f.strip())

    return out

def git_orphans_cache(command_str, commit):
    devnull = open(os.devnull, 'wb')

    note = subprocess.Popen(["git", "notes", "--ref=orphans", "show", commit], stdout=subprocess.PIPE, stderr=devnull)
    out, err = note.communicate()

    if note.returncode != 0:
        note_add = subprocess.Popen(["git", "notes", "--ref=orphans", "add", "-F", "-", commit], stdin=subprocess.PIPE)
        orphans = subprocess.check_output(["git-orphans", commit])
        note_add.communicate("orphans:\n" + orphans)
        print orphans
    else:
        print out[9:]

def git_orphans_diff(command_str, commit):
    orphans = orphans_of_commit(commit)

    for parent in parents_of_commit(commit):
      orphans -= orphans_of_commit(parent)

    for orphan in orphans:
      print orphan


subcommand = sys.argv[1]

if subcommand == "orphans":
    for f in orphans(sys.argv[2]):
        print f
elif subcommand == "git-orphans":
    for f in git_orphans(sys.argv[2], sys.argv[3] if 2 < len(sys.argv) else "HEAD"):
        print f
elif subcommit == "git-orphans-cache":
    git_orphans_cache(sys.argv[2] if 2 < len(sys.argv) else "HEAD")
elif subcommand == "git-orphans-diff":
    git_orphans_diff(sys.argv[2] if 2 < len(sys.argv) else "HEAD")
else:
    print "unknown subcommand"
    exit(1)

#!/usr/bin/env python

import argparse
import os
import shutil
import subprocess
import sys
import tempfile
import time

def orphans_of_commit(commit):
  return set([s.strip() for s in subprocess.Popen(["git-orphans-cache", commit], stdout=subprocess.PIPE).stdout])

def parents_of_commit(commit):
  return list(subprocess.Popen(["git", "rev-list", "--parents", "--max-count=1", commit], stdout=subprocess.PIPE).stdout)[0].strip().split(" ")[1:]

def git_files_of_commit(commit):
    out = set()
    for f in set(subprocess.Popen(["git", "ls-files", "--with-tree=" + commit], stdout=subprocess.PIPE).stdout):
        out.add(f.strip())
    return out

def print_set(s):
    for el in s:
      print el

def orphans(command_str, cwd="."):
    start_time_unix = int(subprocess.check_output(['date', '+%s']).strip())

    time.sleep(1)  # atime has a one-second resolution

    subprocess.call(command_str, cwd=cwd)

    out = set()

    for line in subprocess.Popen(["find", "."], stdout = subprocess.PIPE, cwd=cwd).stdout:
        filepath = line.strip()
        atime_unix = int(subprocess.check_output(["stat", "-f", "%a", filepath], cwd=cwd).strip())
        if atime_unix <= start_time_unix:
            out.add(filepath[2:])

    return out

def git_orphans(command_str, commit):
    devnull = open(os.devnull, 'wb')

    temp_directory_path = tempfile.mkdtemp(suffix='git-orphans');
    subprocess.check_call(["git", "clone", "--recurse-submodules", ".", temp_directory_path], stdout=devnull, stderr=devnull)
    # subprocess.check_call(["git", "fetch", "origin", commit], cwd=temp_directory_path, stdout=devnull, stderr=devnull)
    subprocess.check_call(["git", "checkout", commit], cwd=temp_directory_path, stdout=devnull, stderr=devnull)

    orphs = orphans(command_str, cwd=temp_directory_path)
    git_files = git_files_of_commit(commit)

    shutil.rmtree(temp_directory_path)

    out = set()

    for f in (orphs & git_files):
      out.add(f.strip())

    return out

def git_orphans_cache(command_str, commit):
    devnull = open(os.devnull, 'wb')

    note = subprocess.Popen(["git", "notes", "--ref=orphans:"+command_str, "show", commit], stdout=subprocess.PIPE, stderr=devnull)
    out, err = note.communicate()

    if note.returncode != 0:
        orphans = git_orphans(command_str, commit)
        note_add = subprocess.Popen(["git", "notes", "--ref=orphans"+command_str, "add", "-F", "-", commit], stdin=subprocess.PIPE)
        note_add.communicate("orphans:\n" + orphans)
        return orphans
    else:
        return out.split("\n")

def git_orphans_diff(command_str, commit):
    orphans = orphans_of_commit(commit)

    for parent in parents_of_commit(commit):
      orphans -= orphans_of_commit(parent)

    print_set(orphans)

def main():
    # git orphaned-files <commit>                   ==> git_orphans_cache
    # git orphaned-files --no-cache <commit>        ==> git_orphans
    # git-orphaned-files --diff <commit>            ==> git_orphans_diff
    # git-orphaned-files --diff --no-cache <commit> ==> ?
    parser = argparse.ArgumentParser(description='Find orphans. Kill orphans.')

    parser.add_argument("--diff",     dest="diff",     action='store_true', help="Only show orphaned files which are not orphaned in any parents of this commit")
    parser.add_argument("--no-cache", dest="cache", action='store_false', help="Do not use previously cached results for this command")
    parser.add_argument("commit-ish", default="HEAD", help="The commit to show orphaned files for")

    args = vars(parser.parse_args())

    if not args["cache"] and not args["diff"]:
        print_set(git_orphans("./build.sh", args["commit-ish"]))
    elif args["cache"] and not args["diff"]:
        print_set(git_orphans_cache("./build.sh", args["commit-ish"]))
    elif args["diff"]:
        git_orphans_diff("./build.sh", args["commit-ish"])
    else:
        print "unknown subcommand"
        exit(1)

if __name__ == '__main__':
    main()
